#!/usr/bin/env python3
"""
Usage:
  scripts/oneoff/fill-declaration-answers.py <stage>
"""

import copy
import itertools
import sys

from dmapiclient import DataAPIClient
from docopt import docopt


sys.path.insert(0, '.')

from dmscripts.helpers.auth_helpers import get_auth_token
from dmscripts.helpers.updated_by_helpers import get_user
from dmutils.env_helpers import get_api_endpoint_from_stage

# Declarations (randomly?) generated by the functional tests
DOS5_DECLARATION = {
    '10WorkingDays': True,
    'MI': True,
    'accurateInformation': True,
    'accuratelyDescribed': True,
    'bankrupt': True,
    'canProvideFromDayOne': True,
    'civilServiceValues': True,
    'confidentialInformation': True,
    'conflictOfInterest': True,
    'conspiracy': True,
    'continuousProfessionalDevelopment': True,
    'corruptionBribery': True,
    'customerSatisfactionProcess': False,
    'distortedCompetition': False,
    'distortingCompetition': False,
    'employersLiabilityInsurance': 'insurance',
    'employmentStatus': False,
    'environmentalSocialLabourLaw': True,
    'environmentallyFriendly': True,
    'equalityAndDiversity': True,
    'evidence': False,
    'fraudAndTheft': False,
    'fullAccountability': True,
    'graveProfessionalMisconduct': False,
    'helpBuyersComplyTechnologyCodesOfPractice': True,
    'incorrectTaxReturns': True,
    'influencedContractingAuthority': False,
    'informationChanges': False,
    'misleadingInformation': False,
    'mitigatingFactors': 'ipcMykeF6zlmei5lmhSXgu8lpLdfjtcfnqYMp9RsQ',
    'mitigatingFactors2': '3JQzigHcnI7TiZEwBx8LMgaZ3vdAQIISAle2R5PsVQjgzjUuVdpAzWzwKaQ4wQGA',
    'modernSlaveryTurnover': False,
    'offerServicesYourselves': True,
    'organisedCrime': False,
    'proofOfClaims': True,
    'publishContracts': True,
    'readUnderstoodGuidance': False,
    'safeguardPersonalData': False,
    'safeguardingOfficialInformation': False,
    'seriousMisrepresentation': True,
    'serviceStandard': False,
    'significantOrPersistentDeficiencies': True,
    'skillsAndCapabilityAssessment': True,
    'skillsAndResources': False,
    'subcontracting': 'consortium',
    'supplierOrganisationSize': 'micro',
    'supplierRegisteredBuilding': '14 Duke Street',
    'supplierRegisteredCountry': 'country:IE',
    'supplierRegisteredName': 'f1LGZaf6ZxlVUVFgqOHFWAZWiSzWut8X5aPqq7vq1K5A',
    'supplierRegisteredPostcode': 'H3 LY5',
    'supplierRegisteredTown': 'Dublin',
    'supplierTradingName': 'functional test supplier bce75b5cfd4d2b502c5be9ca6b8f15bf',
    'supplierTradingStatus': 'limited liability partnership (LLP)',
    'taxEvasion': False,
    'termsAndConditions': False,
    'termsOfParticipation': True,
    'terrorism': True,
    'transparentContracting': False,
    'unfairCompetition': False,
    'unspentTaxConvictions': True,
    'witheldSupportingDocuments': True
}

G12_DECLARATION = {
    '10WorkingDays': True,
    'GAAR': False,
    'MI': False,
    'accurateInformation': False,
    'accuratelyDescribed': False,
    'bankrupt': False,
    'canProvideFromDayOne': True,
    'confidentialInformation': True,
    'conflictOfInterest': True,
    'conspiracy': True,
    'corruptionBribery': True,
    'distortedCompetition': False,
    'distortingCompetition': False,
    'dunsNumberCompanyRegistrationNumber': False,
    'employersInsurance': 'No - your organisation does not have, and will not have in place, employer’s liability insurance of at least £5 million before the framework is awarded.',
    'environmentalSocialLabourLaw': False,
    'environmentallyFriendly': True,
    'equalityAndDiversity': True,
    'fraudAndTheft': True,
    'fullAccountability': True,
    'graveProfessionalMisconduct': False,
    'helpBuyersComplyTechnologyCodesOfPractice': False,
    'influencedContractingAuthority': True,
    'informationChanges': True,
    'misleadingInformation': True,
    'mitigatingFactors': 'heaURo6KRIufjOGbALNJw',
    'mitigatingFactors2': 'c59Oe5oWVfzwep3bJWPkBQQ0Lw0zZVq8r6FN6VUjBLQ',
    'modernSlaveryTurnover': False,
    'offerServicesYourselves': True,
    'organisedCrime': True,
    'proofOfClaims': False,
    'publishContracts': False,
    'readUnderstoodGuidance': False,
    'seriousMisrepresentation': False,
    'servicesDoNotInclude': False,
    'servicesHaveOrSupportCloudHostingCloudSoftware': "My organisation isn't submitting cloud hosting (lot 1) or cloud software (lot 2) services",
    'servicesHaveOrSupportCloudSupport': 'Yes',
    'significantOrPersistentDeficiencies': False,
    'subcontracting': ['yourself without the use of third parties (subcontractors)'],
    'supplierOrganisationSize': 'large',
    'supplierRegisteredBuilding': '14 Duke Street',
    'supplierRegisteredCountry': 'country:IE',
    'supplierRegisteredName': 'Gw1oCzZf7m9JZ8lqgeWjEQip5idSu0JTDv15of0pA1gMCTPJTENR5xehjpDQQxQ',
    'supplierRegisteredPostcode': 'H3 LY5',
    'supplierRegisteredTown': 'Dublin',
    'supplierTradingName': 'functional test supplier 7905e172d2b001426623fe7c026cdbd3',
    'supplierTradingStatus': 'public body',
    'taxEvasion': False,
    'termsAndConditions': True,
    'termsOfParticipation': False,
    'terrorism': False,
    'understandHowToAskQuestions': True,
    'understandTool': False,
    'unfairCompetition': True,
    'unspentTaxConvictions': False,
    'witheldSupportingDocuments': False
}


def complete_supplier_declarations(data_api_client, framework_slug, model_declaration):
    suppliers = (supplier for supplier in data_api_client.find_framework_suppliers_iter(framework_slug))

    print(f"\n# Suppliers for {framework_slug}:")
    for supplier in itertools.islice(suppliers, 40):
        try:
            supplier_user = next(
                user for user in data_api_client.find_users_iter(supplier_id=supplier['supplierId']) if user['active']
            )
        except StopIteration:
            continue

        declaration = copy.deepcopy(model_declaration)
        declaration.update(supplier['declaration'])
        data_api_client.update_supplier_declaration(supplier['supplierId'], 'g-cloud-12', declaration)

        print(f"{supplier['supplierId']}: {supplier_user['emailAddress']}")


if __name__ == "__main__":
    arguments = docopt(__doc__)

    stage = arguments['<stage>']

    data_api_client = DataAPIClient(get_api_endpoint_from_stage(stage), get_auth_token('api', stage), user=get_user())

    complete_supplier_declarations(data_api_client, 'g-cloud-12', G12_DECLARATION)
    complete_supplier_declarations(data_api_client, 'digital-outcomes-and-specialists-5', DOS5_DECLARATION)
